# docker-compose build && docker-compose up -d
version: "3.9"

services:

  # nginx:
  #   container_name: bd_nginx
  #   image: nginx-alpine
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - ckan
  #     - next
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/"]
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped

  # next:
  #   container_name: bd_next
  #   build:
  #     context: .
  #     dockerfile: next/Dockerfile
  #   ports:
  #   - "3000:3000"
  #   depends_on:
  #     - ckan
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/"]
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped
  #   volumes:
  #     - ./next:/app

  ckan:
    container_name: bd_ckan
    build:
      context: .
      dockerfile: stack/ckan/Dockerfile
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "0.0.0.0:${CKAN_PORT}:5000"
    env_file:
      - ./.ckan-env
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    volumes:
      - ckan_data:/srv/app/data

  datapusher:
    container_name: bd_datapusher
    image: ghcr.io/keitaroinc/datapusher:${DATAPUSHER_VERSION}
    networks:
      - frontend
      - backend
    ports:
      - "8000:8000"
    environment:
      - DATAPUSHER_MAX_CONTENT_LENGTH=${DATAPUSHER_MAX_CONTENT_LENGTH}
      - DATAPUSHER_CHUNK_SIZE=${DATAPUSHER_CHUNK_SIZE}
      - DATAPUSHER_CHUNK_INSERT_ROWS=${DATAPUSHER_CHUNK_INSERT_ROWS}
      - DATAPUSHER_DOWNLOAD_TIMEOUT=${DATAPUSHER_DOWNLOAD_TIMEOUT}
      - DATAPUSHER_SSL_VERIFY=${DATAPUSHER_SSL_VERIFY}
      - DATAPUSHER_REWRITE_RESOURCES=${DATAPUSHER_REWRITE_RESOURCES}
      - DATAPUSHER_REWRITE_URL=${DATAPUSHER_REWRITE_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  db:
    container_name: bd_db
    build:
      context: .
      dockerfile: stack/postgresql/Dockerfile
      args:
        - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ckan"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    volumes:
      - pg_data:/var/lib/postgresql/data

  solr:
    container_name: bd_solr
    image: solr:8.11.1
    networks:
      - backend
    env_file:
      - ./.ckan-env
    environment:
      - CKAN_CORE_NAME=${CKAN_CORE_NAME}
      - CKAN_VERSION=${CKAN_VERSION}
    volumes:
      - solr_data:/var/solr
      - ${PWD}/stack/solr8/ckan_init_solr.sh:/docker-entrypoint-initdb.d/ckan_init_solr.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8983/solr/admin/ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    container_name: bd_redis
    image: redis:${REDIS_VERSION}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

networks:
  frontend:
  backend:

volumes:
  ckan_data:
  pg_data:
  solr_data:
